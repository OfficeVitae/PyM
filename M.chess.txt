; arguments: 1. player1, 2. player2, 3. remoteplayerindex (default: 0) and 4. ports (default: l(2109,1310) (see M.chess.functions)
$=-1 ; result initialization
debugnow=setdebug(256) ; disable debugging
remoteplayerindex=0 ; initialization needed before any cleanup is performed (which is before the first return function call)
if(player1==player2,return()) ; player names should be different
if(len(player1)==0,remoteplayerindex=1,if(len(player2)==0,remoteplayerindex=2)) ; deduce which one is the remote player (the one of which the name is unknown)
players=l(player1,player2) ; store player names in list
piecetypes='PRNBQK' ; characters to use (pawn, rook, knight, bishop, queen and king)
piecetypenames=l('pawn','rook','knight','bishop','queen','king') ; the names of the piece (types)
playertypes=l('white','black') ; the player 'types'
movecharacters='abcdefghijklmnopqrstuvwxyz.,' ; the characters to use for marking the piece positions on the board that can be moved
moveeffectcharacters=l('+','=','#') ; characters for representing the effect of the last move (of the opponent), i.e. 1=check, 2=draw, 3=mate
moveeffectnames=l('nothing','check','stalemate','mate') ; name of move effect
movetypecolors=l(20,200,201,33,226) ; the move type colors used by showBoard() 1=normal, 2=short castling, 3=long castling, 4=two step pawn, 5=en passant capture
ranges=l(8..1,1..8) ; display ranges
colors=l(231,16) ; the (foreground) color of the pieces
bgcolors=l(247,251) ; the field colors
shadowcolors=l(249,249) ; the grays close to the field colors for showing the row and column name in each field
; initialize the game
rows='12345678' ; the row names
cols='abcdefgh' ; the column names
(movecount=0,moveeffects=l(0,0)) ; the move effect represents the effect of the last move by the player (0='no',1=check,2=draw (not in check, but can't move),3=mate)
playerindex=1 ; current player
(boardstaterecurrence=0,drawoffered=0,moveslefttodrawclaim=100) ; things that have to do with offering or claiming a draw
; keep track of the positions of all pieces (by player, by type)
; if we always store the position of the king in the first element, it's easy to find
; and the nearest rook in the second position, and the farthest rook in the third position to make it easy to check whether they moved
piecepositions=l(
  l(l(6,1,5,0),l(2,1,8,0),l(2,1,1,0),l(3,1,2,0),l(4,1,3,0),l(5,1,4,0),l(4,1,6,0),l(3,1,7,0),l(1,2,1,0),l(1,2,2,0),l(1,2,3,0),l(1,2,4,0),l(1,2,5,0),l(1,2,6,0),l(1,2,7,0),l(1,2,8,0)),
  l(l(6,8,5,0),l(2,8,8,0),l(2,8,1,0),l(3,8,2,0),l(4,8,3,0),l(5,8,4,0),l(4,8,6,0),l(3,8,7,0),l(1,7,1,0),l(1,7,2,0),l(1,7,3,0),l(1,7,4,0),l(1,7,5,0),l(1,7,6,0),l(1,7,7,0),l(1,7,8,0))
  )
;;out("Initial piece positions: ",piecepositions,lf)
; put the pieces on the board
board=replicate(replicate(0,8),8) ; create empty board
for(pi,1..2,ppps=piecepositions(pi),for(ppi,1..len(ppps),pps=ppps(ppi),board(pps(2),pps(3))=if(pi==1,pps(1),-pps(1))))
(piececounts=l(16,16),canshortcastle=l(0,0),canlongcastle=l(0,0),enpassantcols=l(0,0)) ; to allow claiming a draw when a board state is replicated for the third time we have to keep track of the board states
boardstates=l() ; initialize board states
boardstates.=l(l(piececounts,canshortcastle,canlongcastle,enpassantcols,board,0)) ; register first board state (do not forget to append 0 as the recurrence count! and can theoretically might repeat it self), this is the one that might repeat itself when player 1 is to play next
if(debugnow&1,out(lf))
; open a 'channel' to the remote player, start listening and wait for receiving the other player's name or the echo of one's own name
if(remoteplayerindex>0
   ,(brchannel=brstart(ports(remoteplayerindex),ports(3-remoteplayerindex)),if(brchannel<0,return())
    ,brlisten(brchannel),out("Sending over ",ports(remoteplayerindex)," and receiving over ",ports(3-remoteplayerindex)," using channel #",brchannel,".",lf)
    ,out("Opponent: "),ownnametoreceive=1,opponentnametoreceive=1
    ,while(or(ownnametoreceive,opponentnametoreceive),out(".")
          ,if(ownnametoreceive,out(brout(brchannel,players(3-remoteplayerindex))))
          ,wait(1.0),answers=brin(brchannel,0),out(answers),answerindex=len(answers)
          ,while(answerindex>0,if(answers(answerindex)!=players(3-remoteplayerindex),(players(remoteplayerindex)=answers(answerindex),out(players(remoteplayerindex)),brout(brchannel,answers(answerindex)),opponentnametoreceive=0),ownnametoreceive=0),answerindex-=1))
    ,brmute(brchannel),out(lf)
    )
  )
; PREPARE FOR ACCEPTING A MOVE
if(remoteplayerindex==0,out(players(playerindex),", it's your turn now.",lf)) ; it's always the same player's move locally
; if it's the remote player to make a move, we wait for the remote player's move, or (s)he might claim a draw or give up I suppose, in which case we catch that as well)
if(playerindex==remoteplayerindex
  ,(brlisten(brchannel),out("Move of ",players(playerindex),": "),movenotfound=1
   ,while(movenotfound,wait(1.0),movein=brin(brchannel,0),moveinl=len(movein),out(moveinl),if(moveinl==0,out("."))
         ,while(and(movenotfound,moveinl>0),movetext=movein(moveinl),out("{",movetext,"}")
         ,if(and(movetext(1)=='l',movetext(2)=='('),movenotfound=0,if(movetext(1)=='$',return(int(movetext(3))),moveinl-=1))))
   ,brmute(brchannel),out(movetext,lf),move=eval(movetext)
   ,boardstaterecurrence=move(1),drawoffered=move(2),pieceindex=move(3),fromrow=piecepositions(playerindex,pieceindex,2),fromcol=piecepositions(playerindex,pieceindex,3)
   ,piecetypeindex=move(4),piecemoveto=l(move(5),move(6),move(7),move(8)),jump(50-7-18)))
if(movecount>0,out("Chess board after ",movecount," moves:",lf),out("Chess board:",lf))
; determine all valid moves the current player can do (iff the game hasn't ended in a draw (moveeffect=2) or mate (moveeffect=3)
; determine the positions of the pieces that can be moved, and count the number of possible moves
; we also determine if a certain piece can check the opponent with one of its moves
movablepiecepositions=l()
if(moveeffects(3-playerindex)<2
  ,(validmoves=getValidPlayerMoves(),out("Valid moves: ",validmoves,".",lf)
   ,validmovecount=0,piecemovecharacters='',movablepieceindices=l(),movablepiecepositions=l(),
    for(validmoveindex,1..len(validmoves)
       ,lvm=len(validmoves(validmoveindex))
       ,if(lvm>0
          ,(validmovecount+=lvm
           ,pmc=movecharacters(len(movablepiecepositions)+1)
           ,piecemovecharacters+=pmc
           ,movablepieceindices.=l(validmoveindex)
           ,checkormate=0,anydraw=0,piecemoveindex=lvm
           ,while(piecemoveindex>0,select(validmoves(validmoveindex,piecemoveindex,4),,if(checkormate==0,checkormate=2),anydraw=1,checkormate=4),piecemoveindex-=1)
           ,movablepiecepositions.=l(l(piecepositions(playerindex,validmoveindex,2),piecepositions(playerindex,validmoveindex,3),anydraw+checkormate,pmc))
           )
          )
       )
    )
  ,out("Please report the following bug: The current player is allowed to move, but can't!")
  )
;;out("Movable piece indices: ",movablepieceindices,lf)
; show chess board in the orientation of the current player
showBoard(movablepiecepositions,colors(playerindex))
; if in a board state that has occurred at least twice before player may claim a draw
if(boardstaterecurrence>=2,(out("The current board state occurred ",boardstaterecurrence," times before! Do you want to claim a draw [yn]? "),drawclaimed=(inch('yn')==1),out(lf),if(drawclaimed,return(0))))
; ACCEPT THE DRAW OFFER OF THE OPPONENT?
if(drawoffered,(drawoffered=0,out(players(playerindex),", would you agree to a draw [yn]? "),drawagreedupon=(inch('yn')==1),out(lf),if(drawagreedupon,return(0))))
; ASK THE CURRENT PLAYER FOR THE PIECE TO MOVE
(out(players(playerindex)+', what piece do you want to move ['+piecemovecharacters+']? '),piececharacterindex=inch(piecemovecharacters),out(lf)) ; get one of the player pieces characters
if(piececharacterindex<=0,if(givingUp(),(debug=debugnow,return(3-playerindex)),jump(-1))) ; if no piece defined, ask the user if they want to give up
; the piecetype is either a column name (a-h) or the type of one of the pieces
; get the position of this piece, if multiple positions exist, ask the user which one he means, there can be at most 8 of them (pawns), which we may number
pieceindex=movablepieceindices(piececharacterindex) ; returns the index of the piece to move (so piecepositions(playerindex,pieceindex,(2,3)) is the start position)
piecetypeindex=piecepositions(playerindex,pieceindex,1) ; the type of the piece being moved
;;out("Piece index=",pieceindex," - type=",piecetypeindex,lf)
(fromrow=piecepositions(playerindex,pieceindex,2),fromcol=piecepositions(playerindex,pieceindex,3),piecemoveto=getMoveTo(pieceindex,piecetypeindex,colors(playerindex),fromrow,fromcol)) ; where to move the piece to (marking the options in the player color!!)
if(len(piecemoveto)==0,jump(-14)) ; start over (showing the board again!)
;;out("Position to move to=",piecemoveto,lf)
; EXECUTE THE MOVE
(torow=piecemoveto(1),tocol=piecemoveto(2))
out("Moving the ",playertypes(playerindex)," ",piecetypenames(piecetypeindex)," at ",cols(fromcol),rows(fromrow)," to ",cols(tocol),rows(torow),".",lf)
plsign=3-2*playerindex
pawnmoved=(abs(board(fromrow,fromcol))==1)
(movetype=piecemoveto(3),out("movetype=",movetype,".",lf),moveeffects(playerindex)=piecemoveto(4),movecount+=1) ; increment the move count, and remember the 'effect' of the move (1=checks, 2=draw, 3=mate, 0=not in check, can move)
; if this is a pawn promotion, the piecetypeindex can change to 2 (rook), 3 (knight), 4 (bishop) or 5 (queen)
; careful though if this is the execution of the move of the remote player, piecetypeindex will already have changed!!!
if(movetype==6,if(piecetypeindex==1
                 ,(playermoveeffect=moveeffects(playerindex)
                  ,out("Effect of promoting the pawn to:")
                  ,out(" a rook: ",moveeffectnames(1+(playermoveeffect&3)))
                  ,out("  -  a knight: ",moveeffectnames(1+(playermoveeffect>>2)&3))
                  ,out("  -  a bishop: ",moveeffectnames(1+(playermoveeffect>>4)&3))
                  ,out("  -  a queen: ",moveeffectnames(1+(playermoveeffect>>6)&3),".",lf)
                  ,out("What piece would you want the pawn to become [RBNQ]? "),piecetypeindex=inch('RBNQ')+1,if(piecetypeindex<2,piecetypeindex==5)
                  ,piecepositions(playerindex,pieceindex,1)=piecetypeindex,out(lf))
                 ,piecepositions(playerindex,pieceindex,1)=piecetypeindex))
(captured=abs(board(torow,tocol)),board(torow,tocol)=plsign*piecetypeindex,board(fromrow,fromcol)=0) ; perform the move on the board
; register the new position and increment the number of moves made by the moved piece
(piecepositions(playerindex,pieceindex,2)=torow,piecepositions(playerindex,pieceindex,3)=tocol,piecepositions(playerindex,pieceindex,4)+=1)
;;out("Moved piece: player=",playerindex," piece=",pieceindex," info=",piecepositions(playerindex,pieceindex),".",lf)
; don't forget to remove the piece of the opponent that was captured by negating it's type, but first we need to find it
; SPECIAL MOVE TYPES
; 2. short castling
; 3. long castling
; 4. if a pawn moves two rows the first time (as indicated by the move type), we have to make it en passant capturable
; 5. en passant capture
; 6. pawn promotion
if(movetype!=1
  ,(out("Type of move: ")
   ,select(movetype,out("invalid"),
           ,(out("short castling"),board(torow,8)=0,board(torow,6)=plsign*2,piecepositions(playerindex,2,3)=6)
           ,(out("long castling"),board(torow,1)=0,board(torow,4)=plsign*2,piecepositions(playerindex,3,3)=4)
           ,(out("pawn double step"),enpassantcols(playerindex)=fromcol)
           ,(out("en passant capture"),captured=1,torow=fromrow,board(torow,tocol)=0)
           ,(out("pawn promotion"))
           )
    ,out(".",lf)
    )
  )
if(moveeffects(playerindex)>0,(out("Effect of move: "),select(moveeffects(playerindex),,out("check"),out("draw"),out("check and mate")),out(".",lf)))
if(captured>0,(moveslefttodrawclaim=100
              ,opponentindex=3-playerindex,pieceindex=16,found=0
              ,while(and(found==0,pieceindex>0)
                    ,if(and(piecepositions(opponentindex,pieceindex,1)==captured,piecepositions(opponentindex,pieceindex,2)==torow,piecepositions(opponentindex,pieceindex,3)==tocol)
                       ,(found=1,piececounts(opponentindex)-=1,piecepositions(opponentindex,pieceindex,1)=-captured)
                       ,pieceindex-=1
                       )
                    )
              )
             ,if(pawnmoved
                ,(moveslefttodrawclaim=100)
                ,(moveslefttodrawclaim-=1
                 ,if(moveslefttodrawclaim<=0
                    ,(out("At least 50 moves without moving a pawn or capturing a piece have passed! Do you want to claim a draw [yn]?")
                     ,if(inch('yn')==1,moveeffects(playerindex)=2)
                    )
                   )
                  )
                )
  )
; with the move performed we should update the board state but this requires updating #canshortcastle and #canlongcastle of BOTH players
; NOTE that #board, #enpassantcols and #piececounts is already updated
if(piecepositions(playerindex,1,4)==0
  ,(krow=piecepositions(playerindex,1,2),kcol=piecepositions(playerindex,1,3),ksign=3-2*playerindex
   ,canshortcastle(playerindex)=and(piecepositions(playerindex,2,4)==0,board(krow,6)==0,board(krow,7)==0,attacks(-ksign,krow,6)==0,attacks(-ksign,krow,7)==0,attacks(-ksign,krow,8)==0)
   ,canlongcastle(playerindex)=and(piecepositions(playerindex,3,4)==0,board(krow,2)==0,board(krow,3)==0,board(krow,4)==0,attacks(-ksign,krow,4)==0,attacks(-ksign,krow,3)==0,attacks(-ksign,krow,1)==0)
   )
  ,(canshortcastle(playerindex)=0,canlongcastle(playerindex)=0)
  )
(enpassantcols(3-playerindex)=0,moveeffects(3-playerindex)=0) ; cancel any en passant capturing and checking of the current player's opponent
; and now to update the castle opportunities of the next (=current) player
for(pli,1..2
   ,if(and(or(pli==playerindex,moveeffects(playerindex)==0),piecepositions(pli,1,4)==0)
      ,(krow=piecepositions(pli,1,2),kcol=piecepositions(pli,1,3),ksign=3-2*pli
       ,canshortcastle(pli)=and(piecepositions(pli,2,4)==0,board(krow,6)==0,board(krow,7)==0,attacks(-ksign,krow,6)==0,attacks(-ksign,krow,7)==0,attacks(-ksign,krow,8)==0)
       ,canlongcastle(pli)=and(piecepositions(pli,3,4)==0,board(krow,2)==0,board(krow,3)==0,board(krow,4)==0,attacks(-ksign,krow,4)==0,attacks(-ksign,krow,3)==0,attacks(-ksign,krow,1)==0)
       ),(canshortcastle(pli)=0,canlongcastle(pli)=0)
      ))
;;out("Current state: En passant capture column=",enpassantcols(3-playerindex)," - short castling=",if(canshortcastle(playerindex),"yes","no")," - long castling=",if(canlongcastle(playerindex),"yes","no"),".",lf)
boardstate=l(piececounts,canshortcastle,canlongcastle,enpassantcols,board) ; the information we need to store in order to be able to recognize the same state
boardstates.=l(boardstate) ; store board state
; let's determine how often this board state has repeated itself (with the same player to move!!) in the board states, BUT no need when mate
if(moveeffects(playerindex)>=2,(showBoard(l(),colors(playerindex)),return(if(moveeffects(playerindex)==2,0,playerindex)))) ; if stalemate or mate, show the board one last time and exit
(boardstaterecurrence=0,boardstateindex=len(boardstates)-2)
while(and(boardstaterecurrence==0,boardstateindex>0)
     ,if(and(boardstates(boardstateindex,1)==boardstate(1))
        ,if(and(and(boardstates(boardstateindex,2)==boardstate(2)),and(boardstates(boardstateindex,3)==boardstate(3)),and(boardstates(boardstateindex,4)==boardstate(4)),and(boardstates(boardstateindex,5)==boardstate(5)))
           ,(out("Board state recurrence #",boardstateindex,": ",boardstates(boardstateindex,6),".",lf),boardstaterecurrence=boardstates(boardstateindex,6)+1,out("Board state recurrence: ",boardstaterecurrence,".",lf))
           ,boardstateindex-=2)
        ,boardstateindex=0
        )
     )
boardstates(-1).=boardstaterecurrence ; append the board state recurrence count to the registered board state
; if it's not the move of the remote player, show the current board  if (s)he might offer a draw (which I allow only when the opponent cannot claim a draw)
if(playerindex!=remoteplayerindex
  ,(if(boardstaterecurrence<2
      ,(showBoard(l(),colors(playerindex))
       ,if(boardstaterecurrence==1,out("This board state occurred once before. The next time your opponent can claim a draw!",lf))
       ,out(players(playerindex),", do you want to offer ",players(3-playerindex)," a draw [yn]? "),drawoffered=(inch('yn')==1),out(lf)
       )
       ,out("This board occurred at least twice before. Your opponent will now get the opportunity to claim a draw!",lf)
      ))
  )
playerindex=3-playerindex ; switch player
; send the move to the remote player if the remote player is to play next
if(playerindex==remoteplayerindex,brout(brchannel,'l(',boardstaterecurrence,',',drawoffered,',',pieceindex,',',piecetypeindex,',',piecemoveto(1),',',piecemoveto(2),',',piecemoveto(3),',',piecemoveto(4),')'))
jump(-159+8+7+6+6+19+11+8+18+7) ; take all continuations into account!!!
