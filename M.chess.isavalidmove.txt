; determines whether or not the move from #fromrow,#fromcol to #torow,#tocol is valid
; assumes that the piece at (fromrow,fromcol) can actually be moved to (torow,tocol)
; fifth argument #enpassantsign determines whether or not this is an en passant capture (-1 for black, and +1 for white, 0 otherwise)
; but might result in being in check
$=0
;;out("isAValidMove(",fromrow,",",fromcol,",",torow,",",tocol,")=") ; cleanup to write the result
; 1. GET AFFECTED PIECES
(piece=board(fromrow,fromcol),psign=sign(piece),captured=board(torow,tocol)) ; the sign of the player (1 for player 1, and -1 for player 2)
;;if(psign==sign(captured),return()) ; you cannot move to where your own pieces are
; 2. MOVE PIECES
; if this is an en passant capture #enpassantsign will be either 1 (white being captured) or -1 (black being captured)
; in which case the actual position of the pawn is enpassantsign rows up with value enpassantsign (how convenient)
(board(torow,tocol)=piece,board(fromrow,fromcol)=0,if(enpassantsign!=0,board(torow+enpassantsign,tocol)=0))
; 3. UPDATE POSITION KING IF MOVED
(player=if(psign>0,1,2),krow=piecepositions(player,1,2),kcol=piecepositions(player,1,3)) ; the 'before' move king position
if(and(krow==fromrow,kcol==fromcol),(krow=torow,kcol=tocol)) ; if this move moves the king pass along the new king position
; 4. CHECK IF KING IN CHECK NOW
if(attacks(-psign,krow,kcol)==0,$=1) ; if the opponent does not attack the (new) position of the player's King the move is valid
; 5. UNDO MOVE
(board(fromrow,fromcol)=piece,board(torow,tocol)=captured,if(enpassantsign!=0,board(torow+enpassantsign,tocol)=enpassantsign))
